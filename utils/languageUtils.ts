import { SUPPORTED_LANGUAGES, LanguageConfig, Locale } from '@/lib/types'

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
export function getLanguageConfig(code: string): LanguageConfig | undefined {
  return SUPPORTED_LANGUAGES.find(lang => lang.code === code)
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
export function getSupportedLanguages(): LanguageConfig[] {
  return SUPPORTED_LANGUAGES
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
export function isLanguageSupported(code: string): boolean {
  return SUPPORTED_LANGUAGES.some(lang => lang.code === code)
}

// –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
export function getAutoTranslateLanguages(): LanguageConfig[] {
  return SUPPORTED_LANGUAGES.filter(lang => lang.autoTranslate)
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã —è–∑—ã–∫–æ–≤
export function getLanguageCodes(): string[] {
  return SUPPORTED_LANGUAGES.map(lang => lang.code)
}

// –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export function getDefaultLanguage(): LanguageConfig {
  return SUPPORTED_LANGUAGES.find(lang => lang.code === 'ru')!
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
export function detectBrowserLanguage(): string {
  if (typeof window === 'undefined') return 'ru'
  
  const browserLang = navigator.language || navigator.languages?.[0] || 'ru'
  const langCode = browserLang.split('-')[0]
  
  return isLanguageSupported(langCode) ? langCode : 'ru'
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
export function formatLanguageName(code: string): string {
  const config = getLanguageConfig(code)
  return config ? config.name : code
}

// –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ —è–∑—ã–∫–∞
export function getLanguageFlag(code: string): string {
  const config = getLanguageConfig(code)
  return config ? config.flag : 'üåê'
}

// –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
export function createEmptyTranslations(): Record<string, string> {
  const translations: Record<string, string> = {}
  
  for (const lang of SUPPORTED_LANGUAGES) {
    translations[lang.code] = ''
  }
  
  return translations
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞
export function validateLanguageCode(code: string): code is Locale {
  return isLanguageSupported(code)
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
export function getLanguageOptions(): Array<{ value: string; label: string; flag: string }> {
  return SUPPORTED_LANGUAGES.map(lang => ({
    value: lang.code,
    label: lang.name,
    flag: lang.flag
  }))
}
