import { TranslationManager } from './translationManager'
import * as LanguageUtils from './languageUtils'

export interface AutoUpdateConfig {
  enabled: boolean
  interval: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  languages: string[]
  autoSave: boolean
  notifyOnUpdate: boolean
}

export interface UpdateResult {
  success: boolean
  updatedKeys: string[]
  newTranslations: number
  errors: string[]
  timestamp: Date
}

export const DEFAULT_AUTO_UPDATE_CONFIG: AutoUpdateConfig = {
  enabled: true,
  interval: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
  languages: ['en', 'zh', 'th'],
  autoSave: true,
  notifyOnUpdate: true
}

export class AutoTranslationUpdater {
  private translationManager: TranslationManager
  private languageUtils: any
  private config: AutoUpdateConfig
  private intervalId: NodeJS.Timeout | null = null
  private isRunning = false

  constructor(
    translationManager: TranslationManager,
    languageUtils: any,
    config: AutoUpdateConfig
  ) {
    this.translationManager = translationManager
    this.languageUtils = languageUtils
    this.config = config
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      console.warn('AutoTranslationUpdater —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
      return
    }

    if (!this.config.enabled) {
      console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
      return
    }

    this.isRunning = true
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.config.interval}ms)`)

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await this.performUpdate()

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    this.intervalId = setInterval(async () => {
      await this.performUpdate()
    }, this.config.interval)
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId)
      this.intervalId = null
    }
    this.isRunning = false
    console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  async performUpdate(): Promise<UpdateResult> {
    const result: UpdateResult = {
      success: false,
      updatedKeys: [],
      newTranslations: 0,
      errors: [],
      timestamp: new Date()
    }

    try {
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const allKeys = await this.translationManager.getAllTranslationKeys()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
      for (const language of this.config.languages) {
        try {
          const languageKeys = await this.translationManager.getLanguageKeys(language)
          
          // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
          const missingKeys = allKeys.filter(key => !languageKeys.includes(key))
          
          if (missingKeys.length > 0) {
            console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${missingKeys.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ ${language}`)
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
            for (const key of missingKeys) {
              try {
                const sourceText = await this.translationManager.getTranslation('ru', key)
                if (sourceText) {
                  const translatedText = await this.translationManager.translateText(
                    sourceText,
                    'ru',
                    language
                  )
                  
                  if (translatedText) {
                    await this.translationManager.addTranslation(language, key, translatedText)
                    result.updatedKeys.push(`${language}:${key}`)
                    result.newTranslations++
                  }
                }
              } catch (error) {
                const errorMsg = `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ${language}:${key}: ${error}`
                result.errors.push(errorMsg)
                console.error(errorMsg)
              }
            }
          }
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è–∑—ã–∫–∞ ${language}: ${error}`
          result.errors.push(errorMsg)
          console.error(errorMsg)
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.autoSave && result.newTranslations > 0) {
        await this.translationManager.saveAllTranslations()
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${result.newTranslations} –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤`)
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (this.config.notifyOnUpdate && result.newTranslations > 0) {
        this.notifyUpdate(result)
      }

      result.success = result.errors.length === 0
      
      console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.newTranslations} –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤`)
      
    } catch (error) {
      const errorMsg = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}`
      result.errors.push(errorMsg)
      console.error(errorMsg)
    }

    return result
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  private notifyUpdate(result: UpdateResult): void {
    const message = `
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚Ä¢ –ù–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${result.newTranslations}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: ${result.updatedKeys.length}
‚Ä¢ –û—à–∏–±–æ–∫: ${result.errors.length}
‚Ä¢ –í—Ä–µ–º—è: ${result.timestamp.toLocaleString()}

${result.errors.length > 0 ? `‚ùå –û—à–∏–±–∫–∏:\n${result.errors.join('\n')}` : ''}
    `.trim()

    console.log(message)
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram, email –∏ —Ç.–¥.
    this.sendTelegramNotification(message)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
   */
  private async sendTelegramNotification(message: string): Promise<void> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
      // const telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN)
      // await telegramBot.sendMessage(process.env.TELEGRAM_CHAT_ID, message)
      
      console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error)
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  updateConfig(newConfig: Partial<AutoUpdateConfig>): void {
    this.config = { ...this.config, ...newConfig }
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): AutoUpdateConfig {
    return { ...this.config }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
   */
  getStatus(): { isRunning: boolean; lastUpdate?: Date } {
    return {
      isRunning: this.isRunning,
      lastUpdate: this.lastUpdateTime
    }
  }

  private lastUpdateTime?: Date

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  async forceUpdate(): Promise<UpdateResult> {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
    const result = await this.performUpdate()
    this.lastUpdateTime = new Date()
    return result
  }
}

 