interface TelegramMessage {
  text: string
  parse_mode?: 'HTML' | 'Markdown'
  disable_web_page_preview?: boolean
}

interface TranslationStats {
  totalKeys: number
  totalLanguages: number
  lastUpdate: string
  cacheSize: number
}

class TelegramService {
  private botToken: string | null = null
  private chatId: string | null = null
  private isEnabled: boolean = false

  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || null
    this.chatId = process.env.TELEGRAM_CHAT_ID || null
    this.isEnabled = !!(this.botToken && this.chatId)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Telegram API
   */
  async checkHealth(): Promise<boolean> {
    if (!this.isEnabled) {
      return false
    }

    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/getMe`)
      const data = await response.json()
      return data.ok === true
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Telegram:', error)
      return false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  async sendMessage(message: TelegramMessage): Promise<boolean> {
    if (!this.isEnabled) {
      console.warn('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)')
      return false
    }

    try {
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: message.text,
          parse_mode: message.parse_mode || 'HTML',
          disable_web_page_preview: message.disable_web_page_preview || true
        })
      })

      const data = await response.json()
      
      if (data.ok) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
        return true
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data.description)
        return false
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
      return false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   */
  async sendTranslationStats(stats: TranslationStats): Promise<boolean> {
    const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>

üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: <b>${stats.totalKeys}</b>
üåç –Ø–∑—ã–∫–æ–≤: <b>${stats.totalLanguages}</b>
üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: <b>${stats.cacheSize}</b>
üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>${stats.lastUpdate}</b>

<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
    `.trim()

    return this.sendMessage({ text: message })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorNotification(error: string, context?: string): Promise<boolean> {
    const message = `
üö® <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>

${context ? `üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: <b>${context}</b>\n` : ''}
‚ùå –û—à–∏–±–∫–∞: <code>${error}</code>

üïê –í—Ä–µ–º—è: <b>${new Date().toLocaleString('ru-RU')}</b>
    `.trim()

    return this.sendMessage({ text: message })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  async sendUpdateNotification(updatedKeys: string[], newTranslations: number): Promise<boolean> {
    const message = `
‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–π: <b>${updatedKeys.length}</b>
üÜï –ù–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: <b>${newTranslations}</b>

${updatedKeys.length > 0 ? `\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n<code>${updatedKeys.slice(0, 10).join('\n')}</code>${updatedKeys.length > 10 ? '\n...–∏ –µ—â–µ ' + (updatedKeys.length - 10) + ' –∫–ª—é—á–µ–π' : ''}` : ''}

üïê –í—Ä–µ–º—è: <b>${new Date().toLocaleString('ru-RU')}</b>
    `.trim()

    return this.sendMessage({ text: message })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendTestMessage(): Promise<boolean> {
    const message = `
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>${new Date().toLocaleString('ru-RU')}</b>
    `.trim()

    return this.sendMessage({ text: message })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
   */
  getStatus(): { enabled: boolean; configured: boolean } {
    return {
      enabled: this.isEnabled,
      configured: !!(this.botToken && this.chatId)
    }
  }
}

export const telegramService = new TelegramService()
