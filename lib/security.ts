import { NextRequest, NextResponse } from 'next/server'

// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ç–∞–∫
export const securityHeaders = {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS –∞—Ç–∞–∫
  'X-XSS-Protection': '1; mode=block',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç MIME type sniffing
  'X-Content-Type-Options': 'nosniff',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking
  'X-Frame-Options': 'DENY',
  
  // –ü–æ–ª–∏—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  'Referrer-Policy': 'strict-origin-when-cross-origin',
  
  // Content Security Policy (–±–∞–∑–æ–≤–∞—è)
  'Content-Security-Policy': [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval'",
    "style-src 'self' 'unsafe-inline'",
    "img-src 'self' data: https:",
    "font-src 'self'",
    "connect-src 'self'",
    "media-src 'self'",
    "object-src 'none'",
    "base-uri 'self'",
    "form-action 'self'",
    "frame-ancestors 'none'"
  ].join('; '),
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç MIME type confusion
  'X-Download-Options': 'noopen',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç IE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  'X-DO-Content-Type-Options': 'nosniff',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
  'X-Permitted-Cross-Domain-Policies': 'none',
  
  // Strict Transport Security (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTPS)
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç DNS prefetch
  'X-DNS-Prefetch-Control': 'off',
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç cache poisoning
  'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
  'Pragma': 'no-cache',
  'Expires': '0'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export function applySecurityHeaders(response: NextResponse): NextResponse {
  Object.entries(securityHeaders).forEach(([key, value]) => {
    response.headers.set(key, value)
  })
  return response
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
export function createSecureResponse(data: unknown, status: number = 200): NextResponse {
  const response = NextResponse.json(data, { status })
  return applySecurityHeaders(response)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export function validateInput(
  data: Record<string, unknown>, 
  schema: Record<string, {
    required?: boolean
    type?: 'string' | 'number' | 'email' | 'phone'
    minLength?: number
    maxLength?: number
    min?: number
    max?: number
    security?: boolean
  }>
): { isValid: boolean; errors: string[] } {
  const errors: string[] = []
  
  for (const [field, rules] of Object.entries(schema)) {
    const value = data[field]
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (rules.required && (value === undefined || value === null || value === '')) {
      errors.push(`–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`)
      continue
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
    if (rules.type && value !== undefined && value !== null) {
      if (rules.type === 'string' && typeof value !== 'string') {
        errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`)
      } else if (rules.type === 'number' && typeof value !== 'number') {
        errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`)
      } else if (rules.type === 'email' && typeof value === 'string' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
        errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email`)
      } else if (rules.type === 'phone' && typeof value === 'string' && !/^[\+]?[0-9\s\-\(\)]+$/.test(value)) {
        errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (rules.minLength && value && typeof value === 'string' && value.length < rules.minLength) {
      errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${rules.minLength} —Å–∏–º–≤–æ–ª–æ–≤`)
    }
    
    if (rules.maxLength && value && typeof value === 'string' && value.length > rules.maxLength) {
      errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${rules.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —á–∏—Å–µ–ª
    if (rules.min && typeof value === 'number' && value < rules.min) {
      errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ ${rules.min}`)
    }
    
    if (rules.max && typeof value === 'number' && value > rules.max) {
      errors.push(`–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ ${rules.max}`)
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if (typeof value === 'string' && rules.security !== false) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL Injection
      const sqlPatterns = [
        /(\b(union|select|insert|update|delete|drop|create|alter|exec|execute|script)\b)/i,
        /(['";])/,
        /(--)/,
        /(\/\*)/,
        /(\*\/)/,
        /(xp_cmdshell)/i,
        /(sp_)/i
      ]
      
      for (const pattern of sqlPatterns) {
        if (pattern.test(value)) {
          errors.push(`–ü–æ–ª–µ ${field} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã`)
          break
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
      const xssPatterns = [
        /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        /javascript:/i,
        /on\w+\s*=/i,
        /<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi,
        /<object\b[^<]*(?:(?!<\/object>)<[^<]*)*<\/object>/gi,
        /<embed\b[^<]*(?:(?!<\/embed>)<[^<]*)*<\/embed>/gi
      ]
      
      for (const pattern of xssPatterns) {
        if (pattern.test(value)) {
          errors.push(`–ü–æ–ª–µ ${field} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã`)
          break
        }
      }
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
export const validationSchemas: Record<string, Record<string, {
  required?: boolean
  type?: 'string' | 'number' | 'email' | 'phone'
  minLength?: number
  maxLength?: number
  min?: number
  max?: number
  security?: boolean
}>> = {
  lead: {
    name: { required: true, type: 'string', minLength: 2, maxLength: 100, security: true },
    email: { required: true, type: 'email', maxLength: 255, security: true },
    phone: { required: true, type: 'phone', maxLength: 20, security: true },
    telegram: { required: false, type: 'string', maxLength: 50, security: true },
    message: { required: false, type: 'string', maxLength: 1000, security: true },
    source: { required: false, type: 'string', maxLength: 100, security: true }
  },
  
  user: {
    username: { required: true, type: 'string', minLength: 3, maxLength: 50 },
    email: { required: true, type: 'email', maxLength: 255 },
    password: { required: true, type: 'string', minLength: 8, maxLength: 100 }
  },
  
  login: {
    username: { required: true, type: 'string', minLength: 1, maxLength: 100 },
    password: { required: true, type: 'string', minLength: 1, maxLength: 100 }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export function logSecurityEvent(event: string, details: unknown, level: 'info' | 'warn' | 'error' = 'info') {
  const timestamp = new Date().toISOString()
  const logEntry = {
    timestamp,
    level,
    event,
    details,
    ip: 'unknown', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ request
    userAgent: 'unknown' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ request
  }
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  console.warn(`[SECURITY ${level.toUpperCase()}] ${timestamp}: ${event}`, logEntry)
  
  // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (level === 'error') {
    // sendSecurityAlert(logEntry)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
export function detectSuspiciousActivity(request: NextRequest): { isSuspicious: boolean; reason?: string } {
  const userAgent = request.headers.get('user-agent') || ''
  const _ip = request.ip || 'unknown'
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  // console.log('üîç Security check - User-Agent:', userAgent)
  // console.log('üîç Security check - IP:', ip)
  // console.log('üîç Security check - NODE_ENV:', process.env.NODE_ENV)
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ User-Agent (—Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ)
  if (userAgent.includes('sqlmap') || userAgent.includes('nikto') || userAgent.includes('nmap')) {
    return { isSuspicious: true, reason: 'Malicious scanning tool detected' }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ User-Agent
  if (!userAgent || userAgent.trim() === '') {
    return { isSuspicious: true, reason: 'Empty User-Agent' }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ)
  const suspiciousHeaders = ['x-forwarded-for', 'x-real-ip', 'x-client-ip']
  for (const header of suspiciousHeaders) {
    const headerValue = request.headers.get(header)
          if (headerValue) {
        // console.log(`üîç Security check - Header ${header}:`, headerValue)
        
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        if (headerValue === '::1' || headerValue === '127.0.0.1' || headerValue === 'localhost' || 
            headerValue.includes('127.0.0.1') || headerValue.includes('localhost') ||
            process.env.NODE_ENV === 'development') {
          // console.log(`‚úÖ Header ${header} allowed (local/development)`)
          continue
        }
        
        // console.log(`üö® Header ${header} blocked as suspicious`)
        return { isSuspicious: true, reason: `Suspicious header: ${header}` }
      }
  }
  
  // console.log('‚úÖ Security check passed - no suspicious activity detected')
  return { isSuspicious: false }
}
