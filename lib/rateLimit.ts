import { NextRequest, NextResponse } from 'next/server'

// –ü—Ä–æ—Å—Ç–æ–π in-memory store –¥–ª—è rate limiting
const rateLimitStore = new Map<string, { count: number; resetTime: number }>()

interface RateLimitConfig {
  windowMs: number
  maxRequests: number
  message?: string
  statusCode?: number
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
function cleanupExpiredEntries() {
  const now = Date.now()
  rateLimitStore.forEach((value, key) => {
    if (now > value.resetTime) {
      rateLimitStore.delete(key)
    }
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export function resetRateLimitCounters() {
  rateLimitStore.clear()
  console.warn('üßπ Rate Limit: –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã')
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è rate limiting
export function createRateLimit(config: RateLimitConfig) {
  return function rateLimitMiddleware(request: NextRequest) {
    // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
    if (Math.random() < 0.01) {
      cleanupExpiredEntries()
    }

    const ip = request.ip || 'unknown'
    const key = `${ip}:${request.nextUrl.pathname}`
    const now = Date.now()

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    // console.log(`üîç Rate Limit Debug: IP=${ip}, Key=${key}, Path=${request.nextUrl.pathname}`)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è IP
    const current = rateLimitStore.get(key)
    
    if (!current || now > current.resetTime) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      rateLimitStore.set(key, {
        count: 1,
        resetTime: now + config.windowMs
      })
      // console.log(`‚úÖ Rate Limit: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è ${key}, count=1`)
      return null // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (current.count >= config.maxRequests) {
      const retryAfter = Math.ceil((current.resetTime - now) / 1000)
      console.warn(`üö´ Rate Limit: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è ${key}, count=${current.count}, max=${config.maxRequests}`)
      
      return NextResponse.json(
        {
          error: 'Too Many Requests',
          message: config.message || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
          retryAfter,
          limit: config.maxRequests,
          windowMs: config.windowMs
        },
        {
          status: config.statusCode || 429,
          headers: {
            'Retry-After': retryAfter.toString(),
            'X-RateLimit-Limit': config.maxRequests.toString(),
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': new Date(current.resetTime).toISOString()
          }
        }
      )
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    current.count++
    rateLimitStore.set(key, current)
    // console.log(`üìà Rate Limit: –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ${key}, count=${current.count}`)
    
    return null // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  }
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export const rateLimitConfigs = {
  // –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è API
  strict: {
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    maxRequests: 100,
    message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API'
  },
  
  // –£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  auth: {
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    maxRequests: 5,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞'
  },
  
  // –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  public: {
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    maxRequests: 300,
    message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ middleware
export const authRateLimit = createRateLimit(rateLimitConfigs.auth)
export const strictRateLimit = createRateLimit(rateLimitConfigs.strict)
export const publicRateLimit = createRateLimit(rateLimitConfigs.public)
