'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { 
  FileText, 
  Globe, 
  Settings, 
  Save, 
  RefreshCw,
  Eye,
  ChevronDown,
  ChevronRight,
  Languages
} from 'lucide-react'
import ContentPreview from '@/components/ContentPreview'
import ContentNotifications from '@/components/ContentNotifications'

interface ContentSection {
  id: string
  name: string
  path: string
  description: string
  icon: any
}

const contentSections: ContentSection[] = [
  {
    id: 'hero',
    name: '–ì–ª–∞–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è (Hero)',
    path: 'hero',
    description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é',
    icon: Globe
  },
  {
    id: 'about',
    name: '–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
    path: 'about',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –µ—ë –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
    icon: FileText
  },
  {
    id: 'benefits',
    name: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
    path: 'benefits',
    description: '–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    icon: Settings
  },
  {
    id: 'video',
    name: '–í–∏–¥–µ–æ–æ–±–∑–æ—Ä',
    path: 'video',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–∏',
    icon: Eye
  },
  {
    id: 'security',
    name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    path: 'security',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    icon: Settings
  },
  {
    id: 'testimonials',
    name: '–û—Ç–∑—ã–≤—ã',
    path: 'testimonials',
    description: '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞',
    icon: FileText
  },
  {
    id: 'contact',
    name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    path: 'contact',
    description: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
    icon: Globe
  }
]

const languages = [
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
  { code: 'th', name: '‡πÑ‡∏ó‡∏¢', flag: 'üáπüá≠' }
]

export default function AdminContent() {
  const [selectedLanguage, setSelectedLanguage] = useState('ru')
  const [_selectedSection, _setSelectedSection] = useState<string | null>(null)
  const [_content, _setContent] = useState<any>(null)
  const [editingContent, setEditingContent] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [saving, setSaving] = useState(false)
  const [previewMode, setPreviewMode] = useState(false)
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set())
  const [showCopyModal, setShowCopyModal] = useState(false)
  const [copyFromLanguageState, setCopyFromLanguageState] = useState('ru')
  const [notifications, setNotifications] = useState<any[]>([])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    loadContent()
  }, [selectedLanguage])

  const loadContent = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/content?locale=${selectedLanguage}`)
      const result = await response.json()
      
      if (result.success) {
        _setContent(result.data)
        setEditingContent(result.data)
        addNotification('success', '–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω')
      } else {
        console.error('Failed to load content:', result.error)
        addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
      }
    } catch (error) {
      console.error('Error loading content:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const saveContent = async (section?: string) => {
    try {
      setSaving(true)
      
      if (section) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é
        const sectionData = getNestedValue(editingContent, section)
        const response = await fetch('/api/content', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            locale: selectedLanguage,
            section,
            data: sectionData
          })
        })
        
        const result = await response.json()
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          _setContent(editingContent)
          addNotification('success', `–°–µ–∫—Ü–∏—è "${section}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`)
        } else {
          console.error('Failed to save section:', result.error)
          addNotification('error', `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ "${section}"`)
        }
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        const response = await fetch('/api/content', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            locale: selectedLanguage,
            data: editingContent
          })
        })
        
        const result = await response.json()
        if (result.success) {
          _setContent(editingContent)
          addNotification('success', '–í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        } else {
          console.error('Failed to save content:', result.error)
          addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
        }
      }
    } catch (error) {
      console.error('Error saving content:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    } finally {
      setSaving(false)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  const getNestedValue = (obj: any, path: string) => {
    return path.split('.').reduce((current, key) => {
      return current && current[key] !== undefined ? current[key] : null
    }, obj)
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  const setNestedValue = (obj: any, path: string, value: any) => {
    const keys = path.split('.')
    const lastKey = keys.pop()
    const target = keys.reduce((current, key) => {
      if (!current[key]) {
        current[key] = {}
      }
      return current[key]
    }, obj)
    
    if (lastKey) {
      target[lastKey] = value
    }
    
    return obj
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è
  const updateField = (path: string, value: any) => {
    const updated = { ...editingContent }
    setNestedValue(updated, path, value)
    setEditingContent(updated)
  }

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –¥—Ä—É–≥–æ–≥–æ —è–∑—ã–∫–∞
  const copyFromLanguage = async () => {
    try {
      setLoading(true)
      const response = await fetch(`/api/content?locale=${copyFromLanguageState}`)
      const result = await response.json()
      
      if (result.success) {
        setEditingContent(result.data)
        _setContent(result.data)
        setShowCopyModal(false)
        addNotification('success', '–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω')
      } else {
        console.error('Failed to copy content:', result.error)
        addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
      }
    } catch (error) {
      console.error('Error copying content:', error)
      addNotification('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    } finally {
      setLoading(false)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const addNotification = (type: 'success' | 'error' | 'info', message: string) => {
    const id = Date.now().toString()
    const notification = { id, type, message }
    setNotifications(prev => [...prev, notification])
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      removeNotification(id)
    }, 5000)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id))
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
  const toggleSection = (sectionId: string) => {
    const newExpanded = new Set(expandedSections)
    if (newExpanded.has(sectionId)) {
      newExpanded.delete(sectionId)
    } else {
      newExpanded.add(sectionId)
    }
    setExpandedSections(newExpanded)
  }

  // –†–µ–Ω–¥–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞
  const renderField = (path: string, value: any, label: string, type: 'text' | 'textarea' = 'text') => {
    if (type === 'textarea') {
      return (
        <div key={path} className="space-y-2">
          <label className="block text-sm font-medium text-gray-300">
            {label}
          </label>
          <textarea
            value={value || ''}
            onChange={(e) => updateField(path, e.target.value)}
            className="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows={3}
          />
        </div>
      )
    }

    return (
      <div key={path} className="space-y-2">
        <label className="block text-sm font-medium text-gray-300">
          {label}
        </label>
        <input
          type="text"
          value={value || ''}
          onChange={(e) => updateField(path, e.target.value)}
          className="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    )
  }

  // –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderContentSection = (section: ContentSection) => {
    const isExpanded = expandedSections.has(section.id)
    const sectionData = getNestedValue(editingContent, section.path)
    
    if (!sectionData) return null

    return (
      <div key={section.id} className="bg-dark-800 rounded-xl border border-dark-700 overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
        <div 
          className="flex items-center justify-between p-4 cursor-pointer hover:bg-dark-700 transition-colors"
          onClick={() => toggleSection(section.id)}
        >
          <div className="flex items-center space-x-3">
            <section.icon className="w-5 h-5 text-blue-400" />
            <div>
              <h3 className="text-lg font-semibold text-white">{section.name}</h3>
              <p className="text-sm text-gray-400">{section.description}</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={(e) => {
                e.stopPropagation()
                saveContent(section.path)
              }}
              disabled={saving}
              className="flex items-center space-x-1 px-3 py-1 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
            >
              <Save className="w-4 h-4" />
              <span className="text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
            </button>
            {isExpanded ? <ChevronDown className="w-5 h-5 text-gray-400" /> : <ChevronRight className="w-5 h-5 text-gray-400" />}
          </div>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ */}
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="p-4 border-t border-dark-700 space-y-4"
          >
            {renderSectionFields(section.path, sectionData)}
          </motion.div>
        )}
      </div>
    )
  }

  // –†–µ–Ω–¥–µ—Ä –ø–æ–ª–µ–π —Å–µ–∫—Ü–∏–∏
  const renderSectionFields = (path: string, data: any) => {
    const _fields: JSX.Element[] = []

    const processObject = (obj: any, currentPath: string, level: number = 0): JSX.Element[] => {
      const result: JSX.Element[] = []
      
      Object.entries(obj).forEach(([key, value]) => {
        const fieldPath = `${currentPath}.${key}`
        
        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
          // –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
          const nestedFields = processObject(value, fieldPath, level + 1)
          result.push(
            <div key={fieldPath} className={`${level > 0 ? 'ml-4 border-l border-dark-600 pl-4' : ''}`}>
              <h4 className="text-md font-medium text-gray-300 mb-3 capitalize">
                {key.replace(/([A-Z])/g, ' $1').trim()}
              </h4>
              {nestedFields}
            </div>
          )
        } else if (typeof value === 'string') {
          // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ
          const label = key.replace(/([A-Z])/g, ' $1').trim()
          const isLongText = value.length > 100
          
          result.push(
            <div key={fieldPath} className={`${level > 0 ? 'ml-4' : ''}`}>
              {renderField(fieldPath, value, label, isLongText ? 'textarea' : 'text')}
            </div>
          )
        }
      })
      
      return result
    }

    return processObject(data, path)
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between"
      >
        <div>
          <h1 className="text-3xl font-bold text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</h1>
          <p className="text-gray-400 mt-1">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
        </div>
        <div className="flex items-center space-x-3">
          {/* –í—ã–±–æ—Ä —è–∑—ã–∫–∞ */}
          <div className="flex items-center space-x-2">
            <Languages className="w-5 h-5 text-gray-400" />
            <select
              value={selectedLanguage}
              onChange={(e) => setSelectedLanguage(e.target.value)}
              className="px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {languages.map(lang => (
                <option key={lang.code} value={lang.code}>
                  {lang.flag} {lang.name}
                </option>
              ))}
            </select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <button
            onClick={() => setShowCopyModal(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
          >
            <Globe className="w-4 h-4" />
            <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å —è–∑—ã–∫–∞</span>
          </button>
          
          <button
            onClick={() => setPreviewMode(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            <Eye className="w-4 h-4" />
            <span>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</span>
          </button>
          
          <button
            onClick={() => saveContent()}
            disabled={saving}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
          >
            <Save className="w-4 h-4" />
            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë</span>
          </button>
          
          <button
            onClick={loadContent}
            disabled={loading}
            className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50"
          >
            <RefreshCw className="w-4 h-4" />
            <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
          </button>
        </div>
      </motion.div>

      {/* –°–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="space-y-4"
      >
        {contentSections.map(section => renderContentSection(section))}
      </motion.div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.2 }}
        className="bg-dark-800 rounded-xl p-4 border border-dark-700"
      >
        <div className="text-center">
          <p className="text-sm text-gray-400">
            –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
          </p>
        </div>
      </motion.div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <ContentNotifications
        notifications={notifications}
        onRemove={removeNotification}
      />

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <ContentPreview
        content={editingContent}
        isOpen={previewMode}
        onClose={() => setPreviewMode(false)}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showCopyModal && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4"
          onClick={() => setShowCopyModal(false)}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            className="bg-dark-800 rounded-xl p-6 border border-dark-700 max-w-md w-full"
            onClick={(e) => e.stopPropagation()}
          >
            <h3 className="text-xl font-semibold text-white mb-4">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</h3>
            <p className="text-gray-400 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç:
            </p>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  –ò—Å—Ç–æ—á–Ω–∏–∫
                </label>
                <select
                  value={copyFromLanguageState}
                  onChange={(e) => setCopyFromLanguageState(e.target.value)}
                  className="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {languages.filter(lang => lang.code !== selectedLanguage).map(lang => (
                    <option key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
              </div>
              
              <div className="flex space-x-3">
                <button
                  onClick={() => copyFromLanguage()}
                  disabled={loading}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                >
                  {loading ? '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
                <button
                  onClick={() => setShowCopyModal(false)}
                  className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </div>
  )
}
